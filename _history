{"entries":[{"timestamp":1749230165549,"editorVersion":"7.0.61","changes":[{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1749230165548,"editorVersion":"7.0.61","text":{"main.ts":"/****************************************************************************************\n * Project: Micro:bit Multiplayer Game\n * Description: Core logic and custom extensions for micro:bit multiplayer interaction.\n * \n * File: main.ts\n * Contains: Main logic. Initial template.\n * \n * Author: Sebastian Barillaro\n * Date: 2025-06-01\n * Platform: Microsoft MakeCode for micro:bit\n * \n * Notes:\n * - Designed for use with MakeCode editor (https://makecode.microbit.org/)\n * - Compatible with MakeCode's TypeScript (pxt) environment\n * \n * License: Reserved for Luxembourg Tech School ASBL\n ****************************************************************************************/\n\n\n// === Constants ===\n// TODO: Define constant values\nconst defaultDefuseTime = 6  // seconds\nconst radioGroup = 10\n\n// === Flag Variables ===\nlet bombActive = false // false = bomb not active ; true = bomb activated!\nlet gameOver = false // false = game is NOT over (playing) ; true = the game is over.\n\n// === Support Variables ===\nlet defuseCode = \"\"\nlet defuseTime = defaultDefuseTime;\nlet myScore = 0\n\n// === Configuration variables ===\n// Set the number of players!\nlet players = 4;\n// Set your ID (Must be unique in your group)\nlet myID = randint(1, players); // Change the random value for something fix\n// Set the difficulty of the game: \"easy\", (more to come later)\nlet difficulty = \"easy\";\n// Set the defuse code list\nlet defuseCodeList = [\"A\"];\n// Optionally, you can extend the list of codes to include more codes\n// defuseCodeList = [\"A\", \"B\", \"P0\", \"P1\", \"P2\"]\n\n\n// === This executes at the beginning ===\n// Configure the radio Group\n// TODO: radio.setGroup(use the radioGroup here)\n// start the game!\n// TODO: Call the startGame function\n\n\n// === Helper: Show current status (ID + Score) ===\nfunction showStatus() {\n    // Print the label \"ID:\" and the ID on the display\n    // TODO: show ID on the LED display\n\n    // Print the label \"S:\" and the score on the display\n    // TODO: show your score on the LED display\n\n}\n\n// This function configures the device to end the game\nfunction endGame() {\n    // Set the flag gameOver \n    // TODO: set the flag variable gameOver = true\n    // Deactivate any bomb\n    // TODO: set the flag variable bombActive = false\n    //Stop the sound\n    music.stopAllSounds()\n    // Show the NO icon during 1 second (a visual reference)\n    basic.showIcon(IconNames.No)\n    basic.pause(1000)\n    // show the final score on screen\n    // TODO: call the showStatus function\n}\n\n// === Receive Radio Message ===\n// This function executes when the device receives a radio message.\nradio.onReceivedString(handleRadioMessage)\n\n// === handler of the reception ===\nfunction handleRadioMessage(message: string) {\n    // If the game is over, we do nothing (return)\n    // TODO: if (check flag if game is over) \n    {\n        return;\n    }\n\n    // The game is not over. Let's see what we have received\n    if (message == \"gameover\") {\n        // The message received requires to end the game\n        // TODO: Call the endGame function\n        return;\n    }\n\n    // Check if the message is of type bomb\n    if (isBombMessage(message) == true) {\n        // The message is of type bomb! Process the bomb message!\n        // TODO: Call the processBombMessage function!\n    }\n}\n\nfunction processBombMessage(message: string) {\n    // The message received has four parts: bomb, Target ID, Defuse Code, and Defuse time.\n    // All the parts are together, separated by a :\n    // We need to split the parts by the separator\n    let parts = message.split(\":\")\n    // We store the fields in variables starting with m (m for message)\n    let mTargetId = parseInt(parts[1])\n    let mCode = parts[2]\n    let mTime = parseInt(parts[3])\n\n    // All players get a point for surviving this round\n    // TODO: Increment myScore by 1\n\n    // Short alert to all\n    // TODO: basic.showString( Show a visual notification \"!\" )\n\n    //Check if the bomb was sent to me :-O\n    if (mTargetId == myID) {\n        // Caramba!! I have the bomb!\n        // mark the flag bomb active!\n        // TODO: Mark bombActive = true\n        // save the message data:\n        defuseCode = mCode\n        defuseTime = mTime\n\n        // Show how to defuse the bomb on the LED display\n        basic.showString(\"CODE: \" + defuseCode)\n\n        // Start the countdown during \"defuseTime\" seconds\n        // TODO: call countdown() with defuseTime\n\n        // The countdown function ended. Check if you defused the bomb (or not) \n        // TODO: Check if bombActive == true\n        {\n            // The bomb remains active. I am very sorry for you >:-D\n            explodeBomb() // booom!!!\n        }\n    } else {\n        // The bomb is not for me (fiuuuuu)\n        basic.pause(1000)\n        showStatus()\n    }\n}\n\n\n\n// === Defuse Inputs ===\n// This function executes when the button A is pressed\ninput.onButtonPressed(Button.A, function () {\n    // Try to defuse using the code A\n    Defuse(\"A\")\n})\n\n// TODO: add an input function to process the Button B\n\n// TODO: add an input function to process the Pin 0\n// input.onPinPressed(TouchPin.P0, function () {\n//     Defuse(\"P0\")\n// })\n\n// TODO: add an input function to process the Pin 1\n\n// TODO: add an input function to process the Pin 2\n\n// === Helper: Handle Defuse Attempt ===\nfunction Defuse(codePressed: string) {\n    // TODO: Check if game is over. if (gameOver == true) \n    { // If the game is over, there is nothing to do\n        return // end of function\n    }\n\n    // The game is not over. Check if the bomb is active\n    // TODO: Check if game is over. if (bombActive == true) \n    {   // The bomb is active! \n        // Check if defused correctly\n        // TODO: Check if codePressed matches defuseCode. if (defuseCode == codePressed)\n        {// bomb defused correctly. Well done!\n            defuseSuccess()\n        }\n        // TODO: else \n        {\n            // bomb is not defused. I am very sorry for you :-p\n            explodeBomb()\n        }\n    }\n}\n\n\n// === Helper: Send Bomb ===\nfunction sendBomb() {\n    // We need to prepare the bomb message before sending it.\n    // The message is comprised of several parts separated by a :\n    // Consider the following example\n    // - Type of message = bomb\n    // - TargetID = 12\n    // - defuse code = B\n    // - defuse time = 5 seconds\n    // Combining all the data, you can CODIFY a message as bomb:12:B:5\n    let message: string\n\n    // Choose a target to send the bomb\n    let targetID\n    do { //TODO: Set the range of random target ID\n        targetID = randint(0, 0)\n    } while (targetID == myID); // This checks that we don't throw the bomb to ourselves\n\n    // Choose a random defuse code index\n    let defuseCodeIndex = randint(0, defuseCodeList.length - 1)\n    // TODO: Use the defuseCodeIndex to pick a defuse code (from the list of codes)\n    let defuseCode = defuseCodeList[0]\n\n    // Adjust defuse time for extreme difficulty\n    if (difficulty == \"extreme\") {\n        // defuseTime is one second less (minimum 1)\n        defuseTime = Math.max(1, defuseTime - 1)\n    } else {\n        defuseTime = defaultDefuseTime\n    }\n\n    // Show the targetID on screen (and play some sound)   \n    basic.showString(\"To:\" + targetID)\n    music.play(music.builtinPlayableSoundEffect(soundExpression.hello), music.PlaybackMode.InBackground)\n\n    // Assembly all the parts in a single message\n    // TODO: concatenate the parts into a single message.\n    //       Intercalate : in between as a separator\n    message = \"bomb:\" // concatenate + \":\" + the \":\" +  parts ;-)\n\n    // send the message by radio!\n    // TODO: use the message to broadcast by radio\n    radio.sendString(\"your bomb here\")\n}\n\n\n\n","README.md":"\n> Open this page at [https://barillaro.github.io/bomb-game/](https://barillaro.github.io/bomb-game/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/barillaro/bomb-game** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/barillaro/bomb-game** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","backend.ts":"/****************************************************************************************\n * Project: Micro:bit Multiplayer Game\n * Description: Core logic and custom extensions for micro:bit multiplayer interaction.\n * \n * File: backend.ts\n * Contains: Helper functions to aliviate students' work\n * \n * Author: Sebastian Barillaro\n * Date: 2025-06-01\n * Platform: Microsoft MakeCode for micro:bit\n * \n * Notes:\n * - Designed for use with MakeCode editor (https://makecode.microbit.org/)\n * - Compatible with MakeCode's TypeScript (pxt) environment\n * \n * License: Reserved for Luxembourg Tech School ASBL\n ****************************************************************************************/\n\n\nlet lastSendTime = 0\nconst cooldownTimer = 10 //seconds\n\n// === Logo pressed: Send bomb if allowed ===\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    if (bombActive == true) return;\n    if (gameOver == true) return;\n    const now = control.millis()\n    if (now - lastSendTime > cooldownTimer * 1000) {\n        if (myID == -1 || difficulty == \"chaos\") {\n            lastSendTime = now\n            sendBomb()\n        }\n    } else {\n        basic.showIcon(IconNames.No)\n        basic.pause(200)\n    }\n})\n\nfunction startGame() {\n    // play starting sound\n    music.play(music.builtinPlayableSoundEffect(soundExpression.happy), music.PlaybackMode.InBackground)\n    // show the status!\n    showStatus()\n}\n\nfunction countdown(defuseTime: number) {\n    for (let i = 0; i <= defuseTime - 1; i++) {\n        music.playTone(262, 100)\n        // basic.showIcon(IconNames.Heart)\n        basic.showNumber(defuseTime - i)\n        basic.pause(400)\n        music.playTone(349, 100)\n        basic.clearScreen()\n        basic.pause(400)\n        if (bombActive == false) {\n            break;\n        }\n    }\n}\n\n\n// === Helper: Bomb Defused ===\nfunction defuseSuccess() {\n    bombActive = false\n    myScore += 5\n    music.stopAllSounds()\n    basic.showIcon(IconNames.Yes)\n    basic.pause(1000)\n    showStatus()\n    if (difficulty == \"extreme\") {\n        sendBomb()\n    }\n}\n\n// === Helper: Bomb Exploded ===\nfunction explodeBomb() {\n    bombActive = false\n    myScore = Math.max(0, myScore - 5)\n    music.stopAllSounds()\n    music.startMelody([\"C5\", \"B\", \"A\", \"G\", \"F\", \"E\", \"D\", \"C\"], MelodyOptions.Once)\n    basic.showIcon(IconNames.Skull)\n    basic.pause(1000)\n    showStatus()\n}\n\nfunction isBombMessage(message: string) {\n    // Compare the first 5 char of the message with \"bomb:\"\n    if (message.substr(0, 5) == \"bomb:\") {\n        // It is a bomb message. Return true\n        return true\n    } else {\n        // It is NOT a bomb message. Return false\n        return false\n    }\n}\n","pxt.json":"{\n    \"name\": \"Bomb-Game-T0\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"backend.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.61\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}}],"shares":[],"lastSaveTime":1749230165564}